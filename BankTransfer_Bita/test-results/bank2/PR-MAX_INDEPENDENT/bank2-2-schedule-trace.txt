0: <LogicalActor(EventID(-1,-1),akka.actor.LocalActorRefProvider$SystemGuardian),LogicalMessage(CreateChild(Props(<function0>;akka.actor.default-dispatcher;NoRouter;Deploy(;Config(SimpleConfigObject({}));NoRouter;NoScopeGiven));log1-Logging$DefaultLogger),EventID(-1,1),Map(akka://default/deadLetters -> 1)),LogicalActor(EventID(-1,-1),EntryPoint),Map(akka://default/deadLetters -> 2),false,false>
1: <LogicalActor(EventID(0,1),akka.event.Logging$DefaultLogger),LogicalMessage(InitializeLogger(akka.event.EventStream@2be74904),EventID(-1,1),Map(akka://default/deadLetters -> 4)),LogicalActor(EventID(-1,-1),EntryPoint),Map(akka://default/deadLetters -> 5),false,false>
2: <LogicalActor(EventID(-1,1),bank2.Bank),LogicalMessage(Start,EventID(-1,1),Map(akka://default/deadLetters -> 7)),LogicalActor(EventID(-1,-1),EntryPoint),Map(akka://default/deadLetters -> 7, akka://default/user/$a -> 1),false,false>
3: <LogicalActor(EventID(-1,1),bank2.Bank),LogicalMessage(RegisterSender,EventID(-1,2),Map(akka://default/deadLetters -> 8)),LogicalActor(EventID(-1,-1),EntryPoint),Map(akka://default/deadLetters -> 8, akka://default/user/$a -> 7),false,false>
4: <LogicalActor(EventID(2,1),bank2.Account),LogicalMessage(Transfer(Actor[akka://default/user/$a/$c];5),EventID(2,1),Map(akka://default/deadLetters -> 7, akka://default/user/$a -> 5)),LogicalActor(EventID(-1,1),bank2.Bank),Map(akka://default/user/$a -> 5, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 1),false,false>
5: <LogicalActor(EventID(2,3),bank2.Account),LogicalMessage(Deposit(5;Freddy),EventID(4,1),Map(akka://default/user/$a -> 5, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2)),LogicalActor(EventID(2,1),bank2.Account),Map(akka://default/user/$a -> 5, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$c -> 1),false,false>
6: <LogicalActor(EventID(2,3),bank2.Account),LogicalMessage(Continue,EventID(5,1),Map(akka://default/user/$a -> 5, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$c -> 2)),LogicalActor(EventID(2,3),bank2.Account),Map(akka://default/user/$a -> 5, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$c -> 3),false,false>
7: <LogicalActor(EventID(2,3),bank2.Account),LogicalMessage(Withdraw(5),EventID(2,1),Map(akka://default/deadLetters -> 7, akka://default/user/$a -> 6)),LogicalActor(EventID(-1,1),bank2.Bank),Map(akka://default/user/$a -> 6, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$c -> 6),false,false>
8: <LogicalActor(EventID(2,2),bank2.Account),LogicalMessage(Deposit(1;Johnny),EventID(6,1),Map(akka://default/user/$a -> 5, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$c -> 4)),LogicalActor(EventID(2,3),bank2.Account),Map(akka://default/user/$a -> 5, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$b -> 1, akka://default/user/$a/$c -> 4),false,false>
9: <LogicalActor(EventID(2,3),bank2.Account),LogicalMessage(Continue,EventID(6,1),Map(akka://default/user/$a -> 5, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$c -> 5)),LogicalActor(EventID(2,3),bank2.Account),Map(akka://default/user/$a -> 6, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$c -> 7),false,false>
10: <LogicalActor(EventID(2,2),bank2.Account),LogicalMessage(Balance,EventID(9,1),Map(akka://default/user/$a -> 6, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$c -> 8)),LogicalActor(EventID(2,3),bank2.Account),Map(akka://default/user/$a -> 6, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$b -> 2, akka://default/user/$a/$c -> 8),false,false>
11: <LogicalActor(EventID(2,3),bank2.Account),LogicalMessage(1,EventID(10,1),Map(akka://default/user/$a -> 6, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$b -> 3, akka://default/user/$a/$c -> 8)),LogicalActor(EventID(2,2),bank2.Account),Map(akka://default/user/$a -> 6, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$c -> 9, akka://default/user/$a/$b -> 3),true,false>
12: <LogicalActor(EventID(-1,1),bank2.Bank),LogicalMessage(Finish(1),EventID(11,1),Map(akka://default/user/$a -> 6, akka://default/deadLetters -> 7, akka://default/user/$a/$a -> 2, akka://default/user/$a/$c -> 10, akka://default/user/$a/$b -> 3)),LogicalActor(EventID(2,3),bank2.Account),Map(akka://default/deadLetters -> 8, akka://default/user/$a -> 8, akka://default/user/$a/$a -> 2, akka://default/user/$a/$b -> 3, akka://default/user/$a/$c -> 10),false,false>
13: <LogicalActor(EventID(-1,-1),EntryPoint),LogicalMessage(1,EventID(12,1),Map(akka://default/deadLetters -> 8, akka://default/user/$a -> 9, akka://default/user/$a/$a -> 2, akka://default/user/$a/$b -> 3, akka://default/user/$a/$c -> 10)),LogicalActor(EventID(-1,1),bank2.Bank),Map(akka://default/deadLetters -> 9, akka://default/user/$a/$a -> 2, akka://default/user/$a -> 9, akka://default/user/$a/$c -> 10, akka://default/user/$a/$b -> 3),true,false>
